apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
  labels:
    run: infinispan-server
    {{- include "keycloak.labels" . | nindent 4 }}
  name: infinispan-server
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      run: infinispan-server
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config-startup: {{ include (print .Template.BasePath "/infinispan-cm.yaml") . | sha256sum }}
      labels:
        run: infinispan-server
    spec:
      imagePullSecrets:
        - name: registrysecret
      initContainers:
      - name: init-certs
{{ tuple "openssl" . | include "werf_container_image" | indent 8 }}
        command:
          - "/bin/sh"
          - "-c"
        args:
          - "cp /cockroach/* /cockroach-certs/; cd /cockroach-certs/; openssl pkcs8 -topk8 -inform PEM -in client.${CLIENT}.key -outform DER -out client.${CLIENT}.pk8 -v1 PBE-MD5-DES -nocrypt; chmod -R 777 /cockroach-certs/"
        env:
          - name: CLIENT
            value: keycloak
        volumeMounts:
          - name: certs
            mountPath: /cockroach/
          - name: converted-certs
            mountPath: /cockroach-certs/
      containers:
      - args:
        - /opt/infinispan/bin/server.sh
        env:
{{- include "envs" . | indent 8 }}
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: JGROUPS_DISCOVERY_PROTOCOL
          value: "dns.DNS_PING"
        - name: JGROUPS_DISCOVERY_PROPERTIES
          value: dns_query={{ ( printf "infinispan-headless.keycloak-%s.svc.cluster.local" .Values.global.env ) }}
        - name: OPENSHIFT_KUBE_PING_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
{{ tuple "infinispan" . | include "werf_container_image" | indent 8 }}
        name: infinispan-server
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8181
          protocol: TCP
        - containerPort: 8888
          protocol: TCP
        - containerPort: 9990
          protocol: TCP
        - containerPort: 7600
          protocol: TCP
        - containerPort: 7800
          protocol: TCP
        - containerPort: 7900
          protocol: TCP
        - containerPort: 11211
          protocol: TCP
        - containerPort: 11222
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        volumeMounts:
          - name: certs
            mountPath: /cockroach/
          - name: converted-certs
            mountPath: /cockroach-certs/
          - mountPath: /opt/infinispan/server/conf/infinispan.xml
            name: config-volume
            subPath: infinispan.xml
      restartPolicy: {{ .Values.restartPolicy }}
      {{- with .Values.infinispan.affinity }}
      affinity:
        {{- tpl . $ | nindent 8 }}
      {{- end }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
{{- include "toleration" . | indent 6 }}
{{- include "nodeselector" . | indent 6 }}
      volumes:
        - name: config-volume
          configMap:
            name: infinispan
            defaultMode: 0666
        - name: certs
          projected:
            sources:
            - secret:
                name: cockroachdb-keycloak
                items:
                - key: ca.crt
                  path: ca.crt
                  mode: 0400
                - key: tls.crt
                  path: client.keycloak.crt
                  mode: 0400
                - key: tls.key
                  path: client.keycloak.key
                  mode: 0400
        - name: converted-certs
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.deckhouse.io/port: "11222"
    prometheus.deckhouse.io/sample-limit: "5000"
  labels:
    run: infinispan-server
    prometheus.deckhouse.io/custom-target: infinispan
  name: infinispan-server
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  - name: rest
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: console
    port: 11222
    protocol: TCP
    targetPort: 11222
  selector:
    run: infinispan-server
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: headless
  name: infinispan-headless
spec:
  clusterIP: None
  ports:
  - name: jgroups
    port: 7600
    protocol: TCP
    targetPort: 7600
  - name: jgroups1
    port: 7800
    protocol: TCP
    targetPort: 7800
  - name: jgroups2
    port: 7900
    protocol: TCP
    targetPort: 7900
  selector:
    run: infinispan-server
  sessionAffinity: None
  type: ClusterIP
